model_list <- pblapply(exposures, modelstrain)
# Calculate probability of default for each individual in test dataset
predicted_list<-list()
z<-0
for (i in (1:length(exposures))){
for (j in (1:5)){
z<-z+1
predicted_list[[z]] <- predict(model_list[[i]][[j]], test_list[[j]], type="response")
}
}
# Calculate AUC
z<-0
auc_list<-list()
for (i in (1:length(exposures))){
for (i in (1:5)){
z<-z+1
auc_list[[z]]<-auc(test_list[[i]]$vaccine_changescycle_binary, predicted_list[[z]] )
}
}
# Matrix of AUC
# Unlist
ulist<-unlist(auc_list)
# Create vector of names
names<-NULL
for (i in (1:33)){
newnames<-c(rep(exposures[i],5))
names<-c(names,newnames)
}
matauc<-as.data.frame(cbind(names,as.numeric(ulist)))
# group means
library(plyr)
mu <- ddply(matauc, "names", summarise, mean = mean(ulist))
newdat<-tapply(ulist, names,max,na.rm=T)
# load the library
library(forcats)
# Reorder following the value of another column:
aucplot<-matauc %>%
mutate(names = fct_reorder(names, ulist)) %>%
ggplot( aes(x=names, y=ulist))+
geom_point( size=2, color="orange") +
coord_flip() +
xlab("") +
theme_bw()
pdf(file="AUC_univariable_models.pdf")
aucplot
dev.off()
aucplot
# set global R options
pboptions(type = "timer", char = "=") # initialize progress bar
### Exposures -------------------------------------------------------------------
# set list of exposures to test
exposures <- c(
Cs(
covid_group,
covid_tested
)
)
#model function - multivariate
models <- function(x) {
lapply(multfin, function(y)
glm(as.formula(
paste0(
"vaccine_changescycle_binary ~ smoke_before+contra_current_groupall+",
x
)
), data = y, model = TRUE,family=binomial())
)
}
## run  models
models_test <- as.list(seq(1,length(exposures))) # create list to store model results
models_test <- pblapply(exposures, models)
### Pool -------------------------------------------------------------------
pool_tests <- as.list(seq(1,length(exposures))) # create list to store pool results
# run pool
for(j in seq_along(exposures)) {
pool_tests[[j]] <- pool(models_test[[j]])
}
### p values under FDR-------------------------------------------------------------------
library(data.table)
smry1 <-lapply(pool_univariate,
summary,
conf.int = TRUE,
conf.level = 0.95)
smry2 <-lapply(pool_tests,
summary,
conf.int = TRUE,
conf.level = 0.95)
all_models <- rbindlist(c(smry1,smry2))
# this is the FDR p values
all_models$q.value <- p.adjust(all_models$p.value,method = "BH")
## Table with adjusted p values - covid tested  -------------------------------------------------------------------
library(kableExtra)
# subsetting the last model
all_models2<-all_models%>%
filter(row_number() >= (n() - 9)) %>%
filter (term!="(Intercept)")# to remove the intercept from the output
# have significant results in red
row<- which(all_models2$q.value<0.05) # to highlight in red those which are significant
# change names
names(all_models2)<-c("term","estimate","std.error","statistic","df","p.value","lowCI","highCI","q.value")
# create the table
# change row names
all_models2$term <- c("Past smoker","Current smoker","Combined","Copper IUD","Other","Progestin only","Sterilized","Self diagnosed +","Tested +")
# change column names
table<-all_models2%>% filter (term!="(Intercept)")%>%
mutate(OR=exp(estimate))%>%
mutate(ORConf.low=exp(lowCI))%>%
mutate(ORConf.high=exp(highCI))%>%
select(term,OR,ORConf.low,ORConf.high,statistic,df,p.value, q.value) %>%
kbl(caption = "Multivariable model adjusted p-values",
col.names = c("Variable",
"OR",
"95CI_Lower",
"95CI_Higher",
"Statistic",
"Df",
"P value",
"Q value")) %>%
kable_paper(bootstrap_options = "striped", full_width = F
)%>%
row_spec(row=c(row), bold = T, color = "white", background = "#D7261E")%>%
pack_rows("Smoking", 1,2) %>%
pack_rows("Contraception", 3,7) %>%
pack_rows("Covid Status", 8, 9) %>%
kable_styling(full_width = T)
table%>%
save_kable("TableSI_multivariable_COVID_tested.html")
table
## Table with adjusted p values - long covid -------------------------------------------------------------------
library(kableExtra)
# subsetting the model we want
all_models3<-all_models%>%
filter(row_number() <= 110, row_number() >= 101) %>%
filter (term!="(Intercept)")# to remove the intercept from the output
# have significant results in red
row<- which(all_models3$q.value<0.05) # to highlight in red those which are significant
# change names
names(all_models3)<-c("term","estimate","std.error","statistic","df","p.value","lowCI","highCI","q.value")
# create the table
# change row names
all_models3$term <- c("Past smoker","Current smoker","Combined","Copper IUD","Other","Progestin only","Sterilized","Long Covid","Acute Covid")
# change column names
table<-all_models3%>% filter (term!="(Intercept)")%>%
mutate(OR=exp(estimate))%>%
mutate(ORConf.low=exp(lowCI))%>%
mutate(ORConf.high=exp(highCI))%>%
select(term,OR,ORConf.low,ORConf.high,statistic,df,p.value, q.value) %>%
kbl(caption = "Multivariable model adjusted p-values",
col.names = c("Variable",
"OR",
"95CI_Lower",
"95CI_Higher",
"Statistic",
"Df",
"P value",
"Q value")) %>%
kable_paper(bootstrap_options = "striped", full_width = F
)%>%
row_spec(row=c(row), bold = T, color = "white", background = "#D7261E")%>%
pack_rows("Smoking", 1,2) %>%
pack_rows("Contraception", 3,7) %>%
pack_rows("Covid Status", 8, 9) %>%
kable_styling(full_width = T)
table%>%
save_kable("TableSI_multivariable_COVID_type.html")
table
# set global R options
pboptions(type = "timer", char = "=") # initialize progress bar
### Exposures -------------------------------------------------------------------
# set list of exposures to test
exposures <- c(
Cs(
covid_group,
covid_tested
)
)
#model function - multivariate
models <- function(x) {
lapply(multfin, function(y)
glm(as.formula(
paste0(
"vaccine_changescycle_binary ~ smoke_before+contra_current_groupall+changesmenses_num+",
x
)
), data = y, model = TRUE,family=binomial())
)
}
## run  models
models_test <- as.list(seq(1,length(exposures))) # create list to store model results
models_test <- pblapply(exposures, models)
### Pool -------------------------------------------------------------------
pool_tests <- as.list(seq(1,length(exposures))) # create list to store pool results
# run pool
for(j in seq_along(exposures)) {
pool_tests[[j]] <- pool(models_test[[j]])
}
### p values under FDR-------------------------------------------------------------------
library(data.table)
smry1 <-lapply(pool_univariate,
summary,
conf.int = TRUE,
conf.level = 0.95)
smry2 <-lapply(pool_tests,
summary,
conf.int = TRUE,
conf.level = 0.95)
all_models <- rbindlist(c(smry1,smry2))
# this is the FDR p values
all_models$q.value <- p.adjust(all_models$p.value,method = "BH")
## Table with adjusted p values - covid tested  -------------------------------------------------------------------
library(kableExtra)
# subsetting the last model
all_models2<-all_models%>%
filter(row_number() >= (n() - 10)) %>%
filter (term!="(Intercept)")# to remove the intercept from the output
# have significant results in red
row<- which(all_models2$q.value<0.05) # to highlight in red those which are significant
# change names
names(all_models2)<-c("term","estimate","std.error","statistic","df","p.value","lowCI","highCI","q.value")
# create the table
# change row names
all_models2$term <- c("Past smoker","Current smoker","Combined","Copper IUD","Other","Progestin only", "Sterilized","Prior changes in menstrual cycles","Self diagnosed +","Tested +")
# change column names
table<-all_models2%>% filter (term!="(Intercept)")%>%
mutate(OR=exp(estimate))%>%
mutate(ORConf.low=exp(lowCI))%>%
mutate(ORConf.high=exp(highCI))%>%
select(term,OR,ORConf.low,ORConf.high,statistic,df,p.value, q.value) %>%
kbl(caption = "Multivariable model adjusted p-values",
col.names = c("Variable",
"OR",
"95CI_Lower",
"95CI_Higher",
"Statistic",
"Df",
"P value",
"Q value")) %>%
kable_paper(bootstrap_options = "striped", full_width = F
)%>%
row_spec(row=c(row), bold = T, color = "white", background = "#D7261E")%>%
pack_rows("Smoking", 1,2) %>%
pack_rows("Contraception", 3,7) %>%
pack_rows("Prior changes in menses", 8,8) %>%
pack_rows("Covid Status", 9, 10) %>%
kable_styling(full_width = T)
table%>%
save_kable("TableSI_multivariable_menstruation.html")
table
## Table with adjusted p values - long covid -------------------------------------------------------------------
library(kableExtra)
# subsetting the model we want
all_models3<-all_models%>%
filter(row_number() <= 111, row_number() >= 101) %>%
filter (term!="(Intercept)")# to remove the intercept from the output
# have significant results in red
row<- which(all_models3$q.value<0.05) # to highlight in red those which are significant
# change names
names(all_models3)<-c("term","estimate","std.error","statistic","df","p.value","lowCI","highCI","q.value")
# create the table
# change row names
all_models3$term <- c("Past smoker","Current smoker","Combined","Copper IUD","Other","Progestin only", "Sterilization", "Prior changes in menstrual cycles","COVID + long","COVID + short")
# change column names
table<-all_models3%>% filter (term!="(Intercept)")%>%
mutate(OR=exp(estimate))%>%
mutate(ORConf.low=exp(lowCI))%>%
mutate(ORConf.high=exp(highCI))%>%
select(term,OR,ORConf.low,ORConf.high,statistic,df,p.value, q.value) %>%
kbl(caption = "Multivariable model adjusted p-values",
col.names = c("Variable",
"OR",
"95CI_Lower",
"95CI_Higher",
"Statistic",
"Df",
"P value",
"Q value")) %>%
kable_paper(bootstrap_options = "striped", full_width = F
)%>%
row_spec(row=c(row), bold = T, color = "white", background = "#D7261E")%>%
pack_rows("Smoking", 1,2) %>%
pack_rows("Contraception", 3,7) %>%
pack_rows("Prior changes in menses", 8,8) %>%
pack_rows("Covid Status", 9, 10) %>%
kable_styling(full_width = T)
table%>%
save_kable("TableSI8_multivariable_Menstrualchanges_acute_long.html")
table
library(pROC)
#make this example reproducible
set.seed(1)
#Use 70% of dataset as training set and remaining 30% as testing set
train_list<-list()
test_list<-list()
sample_list<-list()
for (i in (1:5)){
sample_list[[i]] <-  sample(c(TRUE, FALSE), nrow(multfin[[i]]), replace=TRUE, prob=c(0.7,0.3))
}
#
for (i in (1:5)){
train_list[[i]] <- multfin[[i]][sample_list[[i]], ]
test_list[[i]] <- multfin[[i]][!sample_list[[i]], ]
}
#
exposures <- c(
Cs(
changesmenses_num
)
)
## model function
modelstrain <- function(x) {
lapply(train_list, function(y)
glm(as.formula(
paste0(
"vaccine_changescycle_binary ~  smoke_before+contra_current_groupall+covid_tested+ ",
x
)
), data = y, model=TRUE, family=binomial())
)
}
## run logistic models
model_list <- as.list(seq(1,length(exposures))) # create list to store model results
model_list <- pblapply(exposures, modelstrain)
# Calculate probability of default for each individual in test dataset
predicted_list<-list()
z<-0
for (i in (1:length(exposures))){
for (j in (1:5)){
z<-z+1
predicted_list[[z]] <- predict(model_list[[i]][[j]], test_list[[j]], type="response")
}
}
# Calculate AUC
z<-0
auc_list<-list()
for (i in (1:length(exposures))){
for (i in (1:5)){
z<-z+1
auc_list[[z]]<-auc(test_list[[i]]$vaccine_changescycle_binary, predicted_list[[z]] )
}
}
# Matrix of AUC
# Unlist
ulist<-unlist(auc_list)
# from 0.55 to 0.61
# Create vector of names
names<-NULL
for (i in (1:1)){
newnames<-c(rep(exposures[i],5))
names<-c(names,newnames)
}
matauc<-as.data.frame(cbind(names,as.numeric(ulist)))
# group means
library(plyr)
mu <- ddply(matauc, "names", summarise, mean = mean(ulist))
newdat<-tapply(ulist, names,max,na.rm=T)
# load the library
library(forcats)
# Reorder following the value of another column:
aucplot<-matauc %>%
mutate(names = fct_reorder(names, ulist)) %>%
ggplot( aes(x=names, y=ulist))+
geom_point( size=2, color="orange") +
coord_flip() +
xlab("") +
theme_bw()
pdf(file="AUC_multivariable_models.pdf")
aucplot
dev.off()
aucplot
# REname levels
levels(multfin[[1]]$covid_group)[1]<- "No Covid"
levels(multfin[[1]]$covid_group)[2]<- "Long Covid"
levels(multfin[[1]]$covid_group)[3]<- "Acute Covid"
# Models
# Model I
modelsmoking<-glm(vaccine_changescycle_binary ~    smoke_before, data = multfin[[1]], family=binomial, model = TRUE)
#
modelchangemense<-glm(vaccine_changescycle_binary ~     smoke_before+contra_current_groupall+covid_tested+changesmenses_num, data = multfin[[1]], family=binomial, model = TRUE)
# Model II
modelchangemensegroup<-glm(vaccine_changescycle_binary ~     smoke_before+contra_current_groupall+covid_group+changesmenses_num, data = multfin[[1]], family=binomial, model = TRUE)
# Model III
modeltested<-glm(vaccine_changescycle_binary ~    smoke_before+contra_current_groupall+covid_tested, data = multfin[[1]], family=binomial, model = TRUE)
# Model IV
modelgroup<-glm(vaccine_changescycle_binary ~    smoke_before+contra_current_groupall+covid_group, data = multfin[[1]], family=binomial, model = TRUE)
# Model V
modelcontra<-glm(vaccine_changescycle_binary ~    contra_current_groupall, data = multfin[[1]], family=binomial, model = TRUE)
# List of models
models <- list( "Model I" = modelsmoking, "Model II" = modelcontra,"Model III" = modeltested, "Model IV" = modelgroup, "Model V" = modelchangemense ,"Model VI" = modelchangemensegroup)
# Plot compare models
plot_OR<-ggcoef_compare(models,
type = c("faceted"),
conf.level = 0.99,
exponentiate = TRUE,
add_reference_rows = TRUE,
variable_labels = c(
smoke_before="Smoking behaviour",
contra_current_groupall= "Contraceptive use",
covid_tested= "COVID-19 diagnosis",
covid_group= "COVID-19 type",
changesmenses_num= "PRMC"))
# Save plot
ggsave(filename="Figure3.jpeg", width = 30,  height = 20, units = "cm", dpi=300)
plot_OR
# set up
trellis.device()
trellis.par.set(list(axis.text = list(font = 1, cex=1)))
trellis.par.set(list(par.ylab.text = list(font = 1, cex=1)))
trellis.par.set(list(par.xlab.text = list(font = 1, cex=1)))
trellis.par.set(list(par.main.text = list(font = 1, cex=1)))
trellis.par.set(grid.pars = list(fontfamily = "serif"))
## Plot effect of contraceptive use
a<-plot(Effect("contra_current_groupall",modelcontra),
lines = list(multiline = FALSE),
lty=0,
lwd=6,
ylim=c(-3,-0.3),
lattice=list(strip=list(factor.names=FALSE)),
confint = list(style = "auto"),
response="",
xlab="Contraceptive use",
ylab= "Predicted probability",
main="")
## Plot effect covid_tested
b<-plot(Effect("covid_tested",modeltested),
lines = list(multiline = T),
lty=0,
lwd=6,
ylim=c(-3,-0.3),
lattice=list(strip=list(factor.names=FALSE)),
confint = list(style = "auto"),
response="",
xlab="COVID Status",
ylab= "Predicted probability",
main="")
## Plot effect covid_group
c<-plot(Effect("covid_group",modelgroup),
lines = list(multiline = T),
lty=0,
lwd=6,
ylim=c(-3,-0.3),
lattice=list(strip=list(factor.names=FALSE)),
confint = list(style = "auto"),
response="",
xlab="COVID Status",
ylab= "Predicted probability",
main="")
## Plot changes menses
d<-plot(Effect("smoke_before",modelsmoking),
lines = list(multiline = T),
lty=0,
lwd=6,
ylim=c(-3,-0.3),
symbols=TRUE,
lattice=list(strip=list(factor.names=FALSE)),
confint = list(style = "auto"),
response="",
xlab="Smoking behaviour",
ylab= "Predicted probability",
main="")
# grid arrange
plotpredictedvalues<-grid.arrange(a,b,c,d,ncol=2)
plotpredictedvalues
# save
pdf(file='Figure4.pdf', width=15,height=8) # Open PDF device with specific file name
grid.arrange(a,b,c,d,ncol=2)
dev.off() # Turn the PDF device off
grid.arrange(a,b,c,d,ncol=2)
completerecords<-dataor %>% select(-c(toosoon)) %>% na.omit()
dim(completerecords)
# manipulation variables
levels(completerecords$smoke_before)[3]<-"Current Smoker"
levels(completerecords$smoke_before)[4]<-"Current Smoker"
completerecords$contra_current_groupall<-as.factor(completerecords$contra_current_groupall)
completerecords$contra_current_groupall<-relevel(completerecords$contra_current_groupall, ref = "None")
## models--------------------------------------------------------
model1<-glm(vaccine_changescycle_binary ~ smoke_before, data =completerecords, family=binomial, model = TRUE)
## model 2----------------------------------------------------
model2<-glm(vaccine_changescycle_binary ~ contra_current_groupall, data =completerecords, family=binomial, model = TRUE)
## model 3----------------------------------------------------
model3<-glm(vaccine_changescycle_binary ~   smoke_before+contra_current_groupall+covid_tested, data =completerecords, family=binomial, model = TRUE)
## model 4----------------------------------------------------
model4<-glm(vaccine_changescycle_binary ~    smoke_before+contra_current_groupall+covid_group, data =completerecords, family=binomial, model = TRUE)
## model 5----------------------------------------------------
model5<-glm(vaccine_changescycle_binary ~    smoke_before+contra_current_groupall+ changesmenses_num+covid_tested, data =completerecords, family=binomial, model = TRUE)
## model 5----------------------------------------------------
model6<-glm(vaccine_changescycle_binary ~   smoke_before+contra_current_groupall+ changesmenses_num+covid_group, data =completerecords, family=binomial, model = TRUE)
### model summary
library(modelsummary)
# plot
msuni<-modelsummary(list(model1,model2,model3,model4,model5,model6),
coef_rename=c(
"smoke_beforeNo, but I have smoked in the past"="Past smokers",
"smoke_beforeCurrent Smoker"="Current smokers",
"contra_current_groupallCopper IUD"="Copper IUD",
"contra_current_groupallCombined estrogen-progestin"="Combined",
"contra_current_groupallProgestin only"= "Progestin only",
"contra_current_groupallOther"= "Other contraceptives",
"contra_current_groupallSterilization"= "Sterilization",
"changesmenses_num"="Menstrual cycle changes over the last year",
"covid_testedSelf diagnosed +"= "COVID self-diagnosed positive",
"covid_testedTested  +"="COVID tested positive",
"covid_groupCOVID + long"="Long Covid",
"covid_groupCOVID + short"="Acute Covid"),
stars = c('*' = 0.05,'**' = 0.01,'***' = 0.001),
exponentiate = TRUE,estimate = "{estimate}{stars} [{conf.low}, {conf.high}]",
statistic = NULL ,
gof_omit = ".*",title = 'Risk factors for vaccine related changes in menstrual cycles using complete cases',
coef_omit = "Intercept",
output = "kableExtra")
# save
save_kable(msuni, file="TableSIcompletecases.html")
msuni
