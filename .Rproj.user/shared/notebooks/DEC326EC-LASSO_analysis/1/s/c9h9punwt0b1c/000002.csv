"0",""
"0",""
"0","## getting column names for lasso (select appropriate method below and comment out others)--------------------------"
"0",""
"0","# make exposure list as all columns of dataset, excluding participant ID"
"0","# exposures <- colnames(data)[which(colnames(data) != ""participant_ID"")]"
"0",""
"0","# # or if you have a few columns to exclude, do it this way"
"0","# exposures <- colnames(data)[which(colnames(data) %nin% c(""participant_ID"","
"0","#                                                          ""old_outcome"","
"0","#                                                          ""unwanted_var""))]"
"0",""
"0",""
"0","# # or else if you have a subset of vars in mind, then create list manually here"
"0","exposures <- c("
"0","    Cs("
"0","        age,"
"0","     #   ethnic_group,"
"0","     #   med_lastyr_binary_num,  # must be factor"
"0","     #   vit_lastyr_binary_num,  # must be factor"
"0","     #   maritalstatus,"
"0","     #   bmi_group,"
"0","     #   physact_before,"
"0","     #   income_before,"
"0","        smoke_before,"
"0","     #   contra_current_groupall,"
"0","     #   cyclelength_before_group,"
"0","     #   period_lengh_before_group,"
"0","     #   heavyperiod_before,"
"0","     #   cycle_irreg_before,"
"0","     #   nbdeliveries,"
"0","     #   vaccine_type,"
"0","     #   vaccine_timing,"
"0","     #   covid_group,"
"0","     #   covid_tested,"
"0","     #   vaccinated,"
"0","     #   changesmenses_num,"
"0","     #   lifesatchanges,"
"0","     #   disease_before_endometriosis_num,"
"0","     #   disease_before_pcos_num,"
"0","     #   disease_before_underthyroid_num,"
"0","     #   disease_before_overthyroid_num,"
"0","     #   disease_before_uterpolyp_num,"
"0","     #   disease_before_uterfibroid_num,"
"0","     #   disease_before_intercystitis_num,"
"0","     #   disease_before_eatingdisord_num,"
"0","     #   liveuk,"
"0","        vaccine_changescycle_binary"
"0","    )"
"0",")"
"0",""
"0",""
"0","## create function to run one-hot coding for dataset"
"0","recode_dataset <- function(x) {"
"0","    "
"0","    # rename df"
"0","    data <- x"
"0","    "
"0","    # subset df to exposures"
"0","    data <- data[exposures]"
"0","    "
"0","    ### re-code factors to numeric and create dummy vars"
"0","    "
"0","    # make duplicate dataset for recoding"
"0","    data_recoded <- data"
"0","    "
"0","    # identify factor vars"
"0","    fact <- sapply(data_recoded, is.factor)"
"0","    "
"0","    # identify ordinal factors"
"0","    ord <- sapply(data_recoded, is.ordered)"
"0","    "
"0","    # convert character strings to numbers"
"0","    data_recoded[ord] <- sapply(data_recoded[ord], as.integer)"
"0","    "
"0","    # convert to numeric"
"0","    data_recoded[ord] <- sapply(data_recoded[ord], as.numeric)"
"0","    "
"0","    ### scale"
"0","    "
"0","    # get numeric columns to scale"
"0","    nums <- sapply(data_recoded, is.numeric)"
"0","    "
"0","    # list of numeric variables to exclude from scaling"
"0","    scale_exclude <- c("
"0","        Cs("
"0","            vaccine_changescycle_binary, # change to correct name. Only necessary if outcome variable is not a factor"
"0","        )"
"0","    )"
"0","    "
"0","    # exclude those columns I don't want to scale"
"0","    nums[names(nums) %in% scale_exclude] <- FALSE # don't want to scale these"
"0","    "
"0","    # perform scale on all remaining numeric vars"
"0","    data_recoded[nums] <- scale(data_recoded[nums],"
"0","                                scale = TRUE)"
"0","    "
"0","    # subset to complete cases for glmnet (can't handle NAs)"
"0","    data_recoded <- data_recoded[complete.cases(data_recoded), ]"
"0","    "
"0","    # return full dataset"
"0","    return(data_recoded)"
"0","    "
"0","}"
"0",""
"0","# run recoding across imputed datasets"
"0","recoded_data <- lapply(mult, recode_dataset)"
"0",""
"0","# check outcome coding just in case (needs to be factor)"
"0",""
"0","for(i in seq_along(recoded_data)){"
"0","    recoded_data[[i]]$vaccine_changescycle_binary <- "
"0","        factor(recoded_data[[i]]$vaccine_changescycle_binary, "
"0","               levels = c(0,1), "
"0","               ordered = FALSE)"
"0","    "
"0","   recoded_data[[i]]$vaccine_changescycle_binary <- "
"0","        relevel(recoded_data[[i]]$vaccine_changescycle_binary,   ref = ""0"")"
"0","}"
"0",""
"0","### create model matrix"
"0",""
"0","# split into training/test sets"
"0","set.seed(2345) # set the seed to make partition reproducible"
"0","train.rows <- createDataPartition(y = recoded_data[[1]]$vaccine_changescycle_binary, # create partition with same proportion of outcome variable"
"0","                                  p = 0.70, # 70% random subsample for training"
"0","                                  list = FALSE) # do not return data as list"
"0",""
"0","# subset the data"
"0","recoded_data_train <- lapply(recoded_data, function(x) x[train.rows, ])"
"0","recoded_data_test <- lapply(recoded_data, function(x) x[-train.rows, ])"
"0",""
"0","y <- recoded_data_train[[1]]$vaccine_changescycle_binary "
"0","y_rep <- recoded_data_test[[1]]$vaccine_changescycle_binary"
"0",""
"0","# make model matrix of exposures"
"0","x <- model.matrix(recoded_data_train[[1]]$vaccine_changescycle_binary ~ .  -1, recoded_data_train[[1]])"
"0","x_rep <- model.matrix(recoded_data_test[[1]]$vaccine_changescycle_binary ~ . - 1, recoded_data_test[[1]])"
"0",""
